script;

use std::assert::{ assert, require };
use std::b256_ops::*;
use std::constants::ZERO;
use std::chain::log_b256;

fn main() -> bool {
    let one = 1;
    let two = 2;
    let three = 3;
    let four = 4;

    let test_val: b256 = 0x0000000000000001_0000000000000002_0000000000000003_0000000000000004;

    let composed = compose(one, two, three, four);
    assert(composed == test_val);

    let(w1, w2, w3, w4) = decompose(test_val);
    assert(w1 == one);
    assert(w2 == two);
    assert(w3 == three);
    assert(w4 == four);

    let composed_2 = compose(1111, 2222, 3333, 4444);
    let(a1, a2, a3, a4) = decompose(composed_2);
    assert(a1 == 1111);
    assert(a2 == 2222);
    assert(a3 == 3333);
    assert(a4 == 4444);

    let composed_3 = compose(9999999999999999, 8888888888888888, 7777777777777777, 6666666666666666);
    let(b1, b2, b3, b4) = decompose(composed_3);
    assert(b1 == 9999999999999999);
    assert(b2 == 8888888888888888);
    assert(b3 == 7777777777777777);
    assert(b4 == 6666666666666666);

    let a: b256 = 0b1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001_1000000000000001;

    let b: b256 = 0b0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001_0000000100000001;

    let c: b256 = 0b0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001_0000000000000001;

    let d: b256 = 0b1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000_1000000100000000;

    let e: b256 = 0b1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001_1000000100000001;

    let f: b256 = 0b1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000_1000000000000000;

    let g: b256 = 0b0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_0000000100000000_;

    let b256_1: b256 = 0x1111111111111111111111111111111111111111111111111111111111111111;//0001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001

    let b256_2: b256 = 0x2222222222222222222222222222222222222222222222222222222222222222;// 0010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010

    let b256_3: b256 = 0x3333333333333333333333333333333333333333333333333333333333333333;//0011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011001100110011

    let b256_4: b256 = 0x4444444444444444444444444444444444444444444444444444444444444444;// 0100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100

    let b256_5: b256 = 0x5555555555555555555555555555555555555555555555555555555555555555;// 0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101

    let b256_F: b256 = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;

    require(a & b == c, 13);
    require(a & c == c, 14);
    require(b & c == c, 15);
    require(a & d == f, 16);
    require(f & e == f, 17);
    require(b & d == g, 18);
    assert(b256_F & b256_3 == b256_3);
    assert(b256_1 & b256_2 == ZERO);
    assert(b256_F & b256_2 == b256_2);

    require(a | g == e, 8);
    require(a | d == e, 9);
    require(a | c == a, 10);
    require(c | f == a, 11);
    require(c | d == e, 12);
    assert(b256_1 | b256_2 == b256_3);
    assert(b256_1 | b256_4 == b256_5);
    assert(b256_2 | b256_3 == b256_3);

    require(a ^ b == d, 1);
    require(a ^ g == e, 2);
    require(b ^ d == a, 3);
    require(f ^ g == d, 4);
    require(b256_1 ^ b256_2 == b256_3, 5);
    require(b256_2 ^ b256_3 == b256_1, 6);
    require(b256_1 ^ b256_3 == b256_2, 7);

    true
}
